Index: bussines-unit/src/main/java/es/ulpgc/dacd/business/BusinessConsumer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package es.ulpgc.dacd.business;\r\n\r\nimport com.google.gson.*;\r\nimport org.apache.activemq.ActiveMQConnectionFactory;\r\n\r\nimport javax.jms.*;\r\nimport java.sql.*;\r\nimport java.sql.Connection;\r\n\r\npublic class BusinessConsumer {\r\n    private final Connection sqlConnection;\r\n\r\n    public BusinessConsumer(String sqlitePath) {\r\n        try {\r\n            this.sqlConnection = DriverManager.getConnection(\"jdbc:sqlite:\" + sqlitePath);\r\n            createTablesIfNeeded();\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(\"Error conectando a SQLite\", e);\r\n        }\r\n    }\r\n\r\n    public void subscribeTo(String topic, String brokerUrl) {\r\n        try {\r\n            ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerUrl);\r\n            javax.jms.Connection connection = factory.createConnection();\r\n            connection.setClientID(\"business-unit-\" + topic);\r\n            connection.start();\r\n\r\n            Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\r\n            Topic dest = session.createTopic(topic);\r\n            MessageConsumer consumer = session.createDurableSubscriber(dest, topic + \"-business-subscriber\");\r\n\r\n            consumer.setMessageListener(message -> {\r\n                if (message instanceof TextMessage textMsg) {\r\n                    try {\r\n                        String json = textMsg.getText();\r\n                        storeInSQLite(topic, json);\r\n                    } catch (Exception e) {\r\n                        System.err.println(\"\\u274C Error procesando mensaje: \" + e.getMessage());\r\n                    }\r\n                }\r\n            });\r\n\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(\"Error al suscribirse al broker\", e);\r\n        }\r\n    }\r\n\r\n    private void createTablesIfNeeded() throws SQLException {\r\n        try (Statement stmt = sqlConnection.createStatement()) {\r\n            stmt.execute(\"\"\"\r\n                CREATE TABLE IF NOT EXISTS events (\r\n                    id TEXT,\r\n                    name TEXT,\r\n                    date TEXT,\r\n                    time TEXT,\r\n                    city TEXT,\r\n                    ss TEXT,\r\n                    json TEXT,\r\n                    UNIQUE(id, date, time)\r\n                )\"\"\");\r\n\r\n            stmt.execute(\"\"\"\r\n                CREATE TABLE IF NOT EXISTS trips (\r\n                    origin TEXT,\r\n                    destination TEXT,\r\n                    departure TEXT,\r\n                    arrival TEXT,\r\n                    price REAL,\r\n                    currency TEXT,\r\n                    ss TEXT,\r\n                    json TEXT,\r\n                    UNIQUE(origin, destination, departure, arrival)\r\n                )\"\"\");\r\n        }\r\n    }\r\n\r\n    private void storeInSQLite(String topic, String json) throws SQLException {\r\n        JsonObject obj = JsonParser.parseString(json).getAsJsonObject();\r\n        String ss = obj.get(\"ss\").getAsString();\r\n\r\n        if (ss.equals(\"feeder-ticketmaster\")) {\r\n            PreparedStatement ps = sqlConnection.prepareStatement(\"\"\"\r\n                INSERT OR IGNORE INTO events (id, name, date, time, city, ss, json)\r\n                VALUES (?, ?, ?, ?, ?, ?, ?)\"\"\");\r\n\r\n            ps.setString(1, obj.get(\"id\").getAsString());\r\n            ps.setString(2, obj.get(\"name\").getAsString());\r\n            ps.setString(3, obj.get(\"date\").getAsString());\r\n            ps.setString(4, obj.get(\"time\").getAsString());\r\n            ps.setString(5, obj.get(\"city\").getAsString());\r\n            ps.setString(6, ss);\r\n            ps.setString(7, json);\r\n            ps.executeUpdate();\r\n\r\n        } else if (ss.equals(\"feeder-blablacar\")) {\r\n            PreparedStatement ps = sqlConnection.prepareStatement(\"\"\"\r\n                INSERT OR IGNORE INTO trips (origin, destination, departure, arrival, price, currency, ss, json)\r\n                VALUES (?, ?, ?, ?, ?, ?, ?, ?)\"\"\");\r\n\r\n            ps.setString(1, obj.get(\"origin\").getAsString());\r\n            ps.setString(2, obj.get(\"destination\").getAsString());\r\n            ps.setString(3, obj.get(\"departure\").getAsString());\r\n            ps.setString(4, obj.get(\"arrival\").getAsString());\r\n            ps.setDouble(5, obj.get(\"price\").getAsDouble());\r\n            ps.setString(6, obj.get(\"currency\").getAsString());\r\n            ps.setString(7, ss);\r\n            ps.setString(8, json);\r\n            ps.executeUpdate();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bussines-unit/src/main/java/es/ulpgc/dacd/business/BusinessConsumer.java b/bussines-unit/src/main/java/es/ulpgc/dacd/business/BusinessConsumer.java
--- a/bussines-unit/src/main/java/es/ulpgc/dacd/business/BusinessConsumer.java	(revision 2b809baa8e119161d7946a10a88ac73f321d1e23)
+++ b/bussines-unit/src/main/java/es/ulpgc/dacd/business/BusinessConsumer.java	(date 1746632062010)
@@ -36,7 +36,7 @@
                         String json = textMsg.getText();
                         storeInSQLite(topic, json);
                     } catch (Exception e) {
-                        System.err.println("\u274C Error procesando mensaje: " + e.getMessage());
+                        System.err.println("Error procesando mensaje: " + e.getMessage());
                     }
                 }
             });
Index: event-store-builder/src/main/java/es/ulpgc/dacd/infrastructure/subscriber/EventConsumer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package es.ulpgc.dacd.infrastructure.subscriber;\r\n\r\nimport javax.jms.*;\r\nimport org.apache.activemq.ActiveMQConnectionFactory;\r\n\r\nimport java.io.*;\r\nimport java.nio.file.*;\r\nimport java.time.*;\r\nimport java.time.format.DateTimeFormatter;\r\n\r\npublic class EventConsumer {\r\n    private final Connection connection;\r\n    private final Session session;\r\n\r\n    public EventConsumer(String brokerUrl) {\r\n        try {\r\n            ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerUrl);\r\n            this.connection = factory.createConnection();\r\n            this.connection.setClientID(\"event-store-builder\");\r\n            this.connection.start();\r\n            this.session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(\"Error al conectar al broker\", e);\r\n        }\r\n    }\r\n\r\n    public void subscribe(String topicName) {\r\n        try {\r\n            Topic topic = session.createTopic(topicName);\r\n            MessageConsumer consumer = session.createDurableSubscriber(topic, topicName + \"-subscriber\");\r\n\r\n            consumer.setMessageListener(message -> {\r\n                if (message instanceof TextMessage textMsg) {\r\n                    try {\r\n                        String json = textMsg.getText();\r\n                        System.out.println(\"Evento recibido desde \" + topicName + \": \" + json); // \uD83D\uDC48 Imprime evento\r\n                        saveEvent(topicName, json);\r\n                    } catch (IOException e) {\r\n                        System.err.println(\"Error guardando evento: \" + e.getMessage());\r\n                    } catch (JMSException e) {\r\n                        System.err.println(\"Error leyendo mensaje JMS: \" + e.getMessage());\r\n                    }\r\n                }\r\n            });\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(\"Error al suscribirse al topic \" + topicName, e);\r\n        }\r\n    }\r\n\r\n    private void saveEvent(String topic, String json) throws IOException {\r\n        String ts = json.split(\"\\\"ts\\\":\\\"\")[1].split(\"\\\"\")[0];\r\n        String ss = json.split(\"\\\"ss\\\":\\\"\")[1].split(\"\\\"\")[0];\r\n        String date = LocalDate.parse(ts.substring(0, 10)).format(DateTimeFormatter.ofPattern(\"yyyyMMdd\"));\r\n\r\n        Path dir = Paths.get(\"eventstore\", topic, ss);\r\n        Files.createDirectories(dir);\r\n\r\n        Path file = dir.resolve(date + \".events\");\r\n        Files.writeString(file, json + System.lineSeparator(), StandardOpenOption.CREATE, StandardOpenOption.APPEND);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/event-store-builder/src/main/java/es/ulpgc/dacd/infrastructure/subscriber/EventConsumer.java b/event-store-builder/src/main/java/es/ulpgc/dacd/infrastructure/subscriber/EventConsumer.java
--- a/event-store-builder/src/main/java/es/ulpgc/dacd/infrastructure/subscriber/EventConsumer.java	(revision 2b809baa8e119161d7946a10a88ac73f321d1e23)
+++ b/event-store-builder/src/main/java/es/ulpgc/dacd/infrastructure/subscriber/EventConsumer.java	(date 1746629930835)
@@ -33,7 +33,7 @@
                 if (message instanceof TextMessage textMsg) {
                     try {
                         String json = textMsg.getText();
-                        System.out.println("Evento recibido desde " + topicName + ": " + json); // ðŸ‘ˆ Imprime evento
+                        System.out.println("Evento recibido desde " + topicName + ": " + json);
                         saveEvent(topicName, json);
                     } catch (IOException e) {
                         System.err.println("Error guardando evento: " + e.getMessage());
Index: bussines-unit/src/main/java/es/ulpgc/dacd/business/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package es.ulpgc.dacd.business;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        String brokerUrl = \"tcp://localhost:61616\";\r\n        String databasePath = \"eventstore.db\";\r\n\r\n        BusinessConsumer consumer = new BusinessConsumer(databasePath);\r\n        consumer.subscribeTo(\"prediction.Events\", brokerUrl);\r\n        consumer.subscribeTo(\"prediction.Trips\", brokerUrl);\r\n\r\n        System.out.println(\"BusinessConsumer activo. Esperando eventos...\");\r\n\r\n        try {\r\n            new EventViewerGUI(databasePath).start();\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error lanzando GUI: \" + e.getMessage());\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bussines-unit/src/main/java/es/ulpgc/dacd/business/Main.java b/bussines-unit/src/main/java/es/ulpgc/dacd/business/Main.java
--- a/bussines-unit/src/main/java/es/ulpgc/dacd/business/Main.java	(revision 2b809baa8e119161d7946a10a88ac73f321d1e23)
+++ b/bussines-unit/src/main/java/es/ulpgc/dacd/business/Main.java	(date 1746632062029)
@@ -3,7 +3,7 @@
 public class Main {
     public static void main(String[] args) {
         String brokerUrl = "tcp://localhost:61616";
-        String databasePath = "eventstore.db";
+        String databasePath = "Datamart.db";
 
         BusinessConsumer consumer = new BusinessConsumer(databasePath);
         consumer.subscribeTo("prediction.Events", brokerUrl);
